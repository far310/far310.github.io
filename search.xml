<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2F2018%2F06%2F24%2FGit%2F</url>
    <content type="text"><![CDATA[1. git diff 文件全局名 对比文件与当前版本库的不同。PS：效果等同：git diff HEAD – 文件全局名 2. cat 文件全局名 查看文件内容 3. git log 查看提交版本日志（只展示当前所在版本及以前版本）。PS：单排显示：git log –pretty=oneline版本号简写显示：git log –pretty=oneline –abbrev-commit时间线显示：git log –graph –pretty=oneline –abbrev-commit 4. git reflog 查看提交版本日志（展示所有版本） 5. git reset –hard HEAD^ PS：版本穿梭，HEAD表示当前版本，HEAD^表示上一版本，HEAD^^表示上两个版本… 6. git reset –hard HEAD~1 PS：版本穿梭，HEAD表示当前版本，HEAD~1表示上一版本，HEAD~2表示上两个版本… 7. git reset –hard 版本号 PS：版本穿梭，版本号不必32位都写全，一般写7位就可以了，git会自己去查找。 8. git checkout – 文件全局名 工作区文件内容会被版本库上最新的内容覆盖 9. git reset HEAD 文件全局名 这样可以清空暂存区，而工作区的内容不变，所以工作区文件状态会发生变化 10. git rm 文件全局名 删除文件PS：只有提交至版本库的文件才能rm，只是在工作区或暂存区是不能使用rm的 11. ssh-keygen -t rsa -C “310253936@qq.com“ PS:邮箱是写自己的生成ssh key 12. git remote add origin git@github.com:qwebh3210/gittest.git 本地仓库关联远程仓库PS：也可以用http协议关联：git remote add origin https://github.com/qwebh3210/gittest.git 13. git push -u origin master 把本地仓库当前分支推送到远程仓库指定分支PS：第一次推送需要参数-u进行验证，之后不需要 14. git clone 远程仓库地址 克隆远程仓库PS：git clone下来的只有master分支 15. git add 文件全局名 把文件添加至暂存区PS：删除的文件不需要add，可以直接commit 16. git log -1 PS：显示最后一次提交信息（作者、时间、提交注释）]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2F2018%2F06%2F24%2FHexo%2F</url>
    <content type="text"><![CDATA[hexo 命令hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本hexo deploy -g #生成加部署hexo server -g #生成加预览命令的简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 作者：牛牛佳俊链接：https://www.jianshu.com/p/a2fe56d11c4f來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[会摆造型的数字时钟]]></title>
    <url>%2F2018%2F06%2F23%2F%E6%97%B6%E9%97%B4%2F</url>
    <content type="text"><![CDATA[会摆造型的数字时钟会是什么样子呢？ 页面效果如下： JS代码如下: &lt;script charset=&quot;Shift_JIS&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js&quot; &gt;&lt;/script&gt; HTML代码如下： &lt;embed width=&quot;320&quot; height=&quot;140&quot; align=&quot;middle&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; name=&quot;honehoneclock&quot; bgcolor=&quot;#ffffff&quot; quality=&quot;high&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf&quot; wmode=&quot;transparent&quot;/&gt;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello GitHub]]></title>
    <url>%2F2018%2F06%2F21%2FHello-GitHub%2F</url>
    <content type="text"><![CDATA[Hello你好！]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>hello</tag>
        <tag>all</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
