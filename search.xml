<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Eclipse编辑Spring配置文件xml时自动提示类class包名]]></title>
    <url>%2F2018%2F07%2F07%2FEclipse%E7%BC%96%E8%BE%91Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6xml%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%90%E7%A4%BA%E7%B1%BBclass%E5%8C%85%E5%90%8D%2F</url>
    <content type="text"><![CDATA[分享连接：https://blog.csdn.net/HH775313602/article/details/70176531 正如ta所说 不行的话就多试几遍，博主一次成功的]]></content>
      <categories>
        <category>Eclipse插件</category>
      </categories>
      <tags>
        <tag>Eclipse插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse的MyBatis插件]]></title>
    <url>%2F2018%2F07%2F06%2FEclipse%E7%9A%84MyBatis%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[分享连接：https://github.com/far310/mybatipse]]></content>
      <categories>
        <category>Eclipse插件</category>
      </categories>
      <tags>
        <tag>Eclipse插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL常用命令]]></title>
    <url>%2F2018%2F06%2F27%2FMySQL%2F</url>
    <content type="text"><![CDATA[命令行连接数据库 mysql h-服务器主机地址 -u用户名 -p密码如果是在本机操作，可省略-h参数，不是本机可以填写地址，或者端3306示例：mysql -u root -p sa 查看当前mysql版本信息及用户名 select version(),user();version()返回版本号，user()返回连接数据库用户名 创建数据库 create database 数据库名; 查看数据库列表 show databases; 选择数据库 use 数据库名;示例：use myschool; 删除数据库 drop database 数据库名;示例：drop database myschool;警告：不要把系统默认的数据库删了，如果删了需要重装。 创建数据库表 首先选择数据库，在创建表cerate table [if not exists] 表名( //if not exists 应该是判断表是否存在 字段1 数据类型 [字段属性|约束] [索引] [注释] , 字段2 数据类型 [字段属性|约束] [索引] [注释])[表类型] [表字符集] [注释];示例：cerate table myschool( No int(4) primary key,//primary key 设置主键 //not null 非空约束 name char(10)); 添加数据 insert into 表名 value(值1),(值2),(值3);示例：insert into name value(‘1’),(‘2’),(‘3’); 字段的约束及属性 not null 非空约束default 默认约束unique key(‘字段’) 唯一约束primary key 主键约束foreign key (‘主表字段’) 外键约束auto_increment 自动增长 标识列 注释 create table test( id int(11) unsigned//唯一约束 comment ‘编号’)comment=’测试表’; 查看表 show tables; 查看表的定义 describe 表名;desc 表名;示例：use myschool;desc student; 删除表 drop table [if exists] 表名; mysql帮助 help 查询的关键字; 修改表名 alter table&lt;旧表名&gt; rename [to] &lt;新表名&gt;;\to为可选参数，使用与否不影响结果。仅修改表名，表结构不表示例：alter table student rename stu; 添加字段 alter table 表名 add 字段名 数据类型 [属性];示例：alter table add pwd varchar(50) not null; 修改字段 alter table 表名 change 原字段 新字段 数据类型 [属性];示例：alter table demo change name username char(2) not null; 删除字段 alter table 表名 drop 字段名;示例：alter table demo drop pwd; 添加主外键约束 alter table 表名 add constraint 主键名 primary key 表名(主键字段); //主键名以pk_开头示例：alter table grade add constraint pk_grade primary key grade(gradeId); 组合主键 primary key(主键字段1，主键字段2); 添加外键约束 alter table 表名//从表 add constraint 外键名 foreign key(外键字段) references 关键表名(关联字段)//主表; \外键名以fk_开头示例：alter table student add constraint fk_student_grade foreign key(gradeId) references grade(gradeId); 备份 方式1：insert into 新表(字段1，字段2)\新表必须存在select 字段1，字段2from 原表;方式2：create table 新表（select 字段1，字段2 from 原表）; 删除数据 delete from 表名 [where条件];条件删除，标识列继续truncate table 表名;删除全部数据，标识列从头开始 limit子句 limit [从第几条开始查\从0开始，行数]示例：limit 4,4; 执行事务 开始事务：begin;提交事务：commit;撤销事务：rollback; 使用sql语句创建视图 create view 视图名as &lt;select语句&gt; 使用sql语句删除视图 drop view [if exists] 视图名; 查看视图 select 字段1，字段2 from 视图名 数据备份 mysqldump -u 登录名 -p 密码 要备份的数据 [表名] &gt; 文件名称 数据还原 -u 登录名 -p 密码 &lt; 文件名称]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo命令]]></title>
    <url>%2F2018%2F06%2F25%2FHexo%2F</url>
    <content type="text"><![CDATA[hexo 命令 hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本hexo deploy -g #生成加部署hexo server -g #生成加预览 命令的简写 hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2F2018%2F06%2F24%2FGit%2F</url>
    <content type="text"><![CDATA[1. git diff 文件全局名 对比文件与当前版本库的不同。PS：效果等同：git diff HEAD – 文件全局名 2. cat 文件全局名 查看文件内容 3. git log 查看提交版本日志（只展示当前所在版本及以前版本）。PS：单排显示：git log –pretty=oneline版本号简写显示：git log –pretty=oneline –abbrev-commit时间线显示：git log –graph –pretty=oneline –abbrev-commit 4. git reflog 查看提交版本日志（展示所有版本） 5. git reset –hard HEAD^ PS：版本穿梭，HEAD表示当前版本，HEAD^表示上一版本，HEAD^^表示上两个版本… 6. git reset –hard HEAD~1 PS：版本穿梭，HEAD表示当前版本，HEAD~1表示上一版本，HEAD~2表示上两个版本… 7. git reset –hard 版本号 PS：版本穿梭，版本号不必32位都写全，一般写7位就可以了，git会自己去查找。 8. git checkout – 文件全局名 工作区文件内容会被版本库上最新的内容覆盖 9. git reset HEAD 文件全局名 这样可以清空暂存区，而工作区的内容不变，所以工作区文件状态会发生变化 10. git rm 文件全局名 删除文件PS：只有提交至版本库的文件才能rm，只是在工作区或暂存区是不能使用rm的 11. ssh-keygen -t rsa -C “310253936@qq.com“ PS:邮箱是写自己的生成ssh key 12. git remote add origin git@github.com:qwebh3210/gittest.git 本地仓库关联远程仓库PS：也可以用http协议关联：git remote add origin https://github.com/qwebh3210/gittest.git 13. git push -u origin master 把本地仓库当前分支推送到远程仓库指定分支PS：第一次推送需要参数-u进行验证，之后不需要 14. git clone 远程仓库地址 克隆远程仓库PS：git clone下来的只有master分支 15. git add 文件全局名 把文件添加至暂存区PS：删除的文件不需要add，可以直接commit 16. git log -1 PS：显示最后一次提交信息（作者、时间、提交注释）]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[会摆造型的数字时钟]]></title>
    <url>%2F2018%2F06%2F23%2F%E6%97%B6%E9%97%B4%2F</url>
    <content type="text"><![CDATA[会摆造型的数字时钟会是什么样子呢？ 页面效果如下： JS代码如下: &lt;script charset=&quot;Shift_JIS&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js&quot; &gt;&lt;/script&gt; HTML代码如下： &lt;embed width=&quot;320&quot; height=&quot;140&quot; align=&quot;middle&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; name=&quot;honehoneclock&quot; bgcolor=&quot;#ffffff&quot; quality=&quot;high&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf&quot; wmode=&quot;transparent&quot;/&gt;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是单例模式]]></title>
    <url>%2F2018%2F05%2F16%2F%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;单例模式，顾名思义就是程序在运行的过程中，有且只有一个实例。它必须满足三个关键点。 &emsp;&emsp;1）一个类只有一个实例。这是满足单例模式最基本的要求，若要满足这个关键点，只能提供私有的构造器，即保证不能随意创建该类的实例。123456789101112131415161718public class ConfigManager &#123; private static ConfigManager configManager; //私有构造器-读取数据库配置文件 private ConfigManager()&#123; String configFile = &quot;database.properties&quot;; properties = new Properties(); InputStream is = ConfigManager.class.getClassLoader().getResourceAsStream(configFile); try &#123; properties.load(is); is.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; &emsp;&emsp;在上述代码中，我们把读取配置文件的I/O操作代码放入私有构造器里，这样可以有效地保证I/O操作在整个系统运行期间仅被执行一次，以解决资源消耗问题。 &emsp;&emsp;2）它必须自行创建这个实例。对于这一点，正是体现了：单例模式的“有且仅有一个实例”的这一特性。我们要保证唯一性，也就意味着必须要提供一个实例，那么就需要它自行创建，定义一个ConfigManager类型的静态的私有对象，以便向外界提供该类实例时使用。1234567891011121314151617181920//读取配置文件的工具类-单例模式public class ConfigManager &#123; private static ConfigManager configManager; private static Properties properties; //私有构造器-读取数据库配置文件 private ConfigManager()&#123; String configFile = &quot;database.properties&quot;; properties = new Properties(); InputStream is = ConfigManager.class.getClassLoader().getResourceAsStream(configFile); try &#123; properties.load(is); is.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; &emsp;&emsp;在上面的代码中，我们定义了一个ConfigManager的静态私有对象configManager。 &emsp;&emsp;3）它必须自行向整个系统提供这个实例。最后一点也是至关重要的，外界需要获取并使用这个单例类的实例，但是由于该类的构造器是私有的，外界无法通过new去获取它的实例，那么就必须提供一个静态的公有方法，该方法创建或者获取它本身的静态私有对象并返回。 123456789101112131415161718192021222324252627282930//读取配置文件的工具类-单例模式public class ConfigManager &#123; private static ConfigManager configManager; private static Properties properties; //私有构造器-读取数据库配置文件 private ConfigManager()&#123; String configFile = &quot;database.properties&quot;; properties = new Properties(); InputStream is = ConfigManager.class.getClassLoader().getResourceAsStream(configFile); try &#123; properties.load(is); is.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; //全局访问点 public static ConfigManager getInstance()&#123; if(configManager == null)&#123; configManager = new ConfigManager(); &#125; return configManager; &#125; //根据传入的key获取相应的value值 public String getValue(String key)&#123; return properties.getProperty(key); &#125;&#125; &emsp;&emsp;在上面的代码中，我们添加了一个全局的访问点getInstance()方法，该方法返回该类的实例，以被外界使用。在该方法体内，进行了简单的逻辑判断，若configManager为null，那么创建该实例；若不为空，那么直接返回configManager实例即可，不需要再实例化该类的对象。 &emsp;&emsp;为什么要将getInstance（）方法定位为static呢？ &emsp;&emsp;因为作为该单例类的全局访问点，外界需要哦调用该方法来获取configManager方法，则该方法必须也是静态的，否则无法调用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[胡思乱想]]></title>
    <url>%2F2018%2F05%2F14%2F%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3%2F</url>
    <content type="text"><![CDATA[关于智能手机&emsp;&emsp;近些年来智能手机的发展可谓是日新月异，无论是硬件方面来说，还是从软件方面。回想一下，12年、13年的时候，身边的朋友用的都还是带按键的手机，牛皮一点的是传说中的触屏（用指甲使劲戳几下就能选中）手机。功能上也就是打电话，最多带个QQ。总的来说没有跨出手机本身的意义。&emsp;&emsp;记得是从13年左右的时候，智能手机出现在了中国大众的手中（依稀记得当时被炒上天的iPhone，一男子割肾只求一台iphone4s）笑，随着智能手机的发展，安卓迎来了一波春天。安卓平台上的app，尽力的满足着基数巨大的国民，只有想不到，没有做不到（毕竟流量即金钱）。微信、淘宝、短视频app、自媒体，从各个角度出发吸引着大众的眼球。触手可得的资讯、宝贵的知识，动动手指即可获得，不！手指都不需要动，即自动送到你的眼下。只求你的片刻停留。&emsp;&emsp;在这样的环境下，产生了各种博人眼球的新兴词汇：知识焦虑、碎片化阅读、知识付费。产生这些词汇背后的本质是什么？获得你的停留，获取流量，继而获利。是的，有一小部分人获利了，根据2/8定律，获利的对象是那八成的大众。&emsp;&emsp;大众是愚昧的，像一位皇帝一样被伺候着，被虚有的信息刺激着大脑多巴胺的分泌，获取着令大脑愉悦的快感。温水煮青蛙。使用虚拟的网络、朋友圈，装饰着虚幻的小我。时间久了变得分不清哪个才是真正的自我。&emsp;&emsp;更加可怕的是这一代的小孩，从小就生活在这样虚无飘渺的世界中。&emsp;&emsp;何以解忧？引用许嵩许多年前的写的歌词 放下客户端，立地成佛 关于色&emsp;&emsp;现中国环境下，随着网络的普及，弃前人之鉴而不顾。完全不知戒色为何物。子曰：少之时，气血未定，戒之在色。又有前人曰：二八佳人体似酥，腰间仗剑斩愚夫。 &emsp;&emsp;唾手可及的情色讯息，打开潘多拉盒子的现代中国，年轻一代深受茶毒。殊不知，精为人之本，发之华。&emsp;&emsp;为着短暂的快感，而全然不顾根本。殊不知，所谓的快感，其实是毒药。&emsp;&emsp;食与色，为人之本性。驾驭不了本性之人，与禽兽何异。&emsp;&emsp;当局者迷旁观者清。跳出来，你能看到更美好的世界。 关于阅读&emsp;&emsp;阅读一事，实在有趣。白日清欢无它事，摇椅捧书笑偷闲。多少人迷失在所谓的阅读上面，以为可以寻到宝藏，还是太轻浮了。将心静下来，仔细想想宝藏在哪里？&emsp;&emsp;书有消遣与教材之分（个人看法，欢迎探讨）。&emsp;&emsp;千人千面，在消遣类的书籍中，不同的人都不同的感想和收获。这是强求不来的，有些书，人家说好，但是你读不进去，硬着头皮读下去，你也得不到什么。你选择书，书也在选择你。还不如洒脱的将其丢在一旁。等他日机遇到了自然会想起。&emsp;&emsp;教材类书籍，才是你学习知识的宝贵财富。它讲述的是明确的内容，它所存在的意义就是将作者的知识记载下来，供世人消化、学习。自然，干货的汲取舒适度、速度肯定是不如消遣类书籍来得愉悦、来得迅速。但是这毕竟是实实在在的知识呀。&emsp;&emsp;人天性就是追寻舒适。能掌控自己的人，属于少数。 关于内心当局者迷旁观者清 &emsp;&emsp;上面这句话，你真的懂吗？&emsp;&emsp;人是由无数细胞组成的碳基生命体，细胞是新陈代谢的，也就是说，从理论上讲，你从出生到现在，实际上你的身体已经换了好几遍了。你还是你吗？&emsp;&emsp;没错，你还是你，我现在是在和真正的你讲话。我口中的你，是你的思想本身。不用去别处寻找，你就是你。情绪、欲望、邪念都不是真的你。跳出来，你就是不一样的你。身体是客观存在的物体，而你（本我）才是旁观着这一切的旁观者。&emsp;&emsp;嗯，时间不早了，就写到这里吧。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对人工智能的一些思考]]></title>
    <url>%2F2017%2F12%2F01%2F%C2%96%C2%96%E5%AF%B9%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;人工智能 前段时间，在朋友圈看到的一张图片。促使我写下了这篇文章。 封面上，满大街的机器人行走散步。人类席地而坐，衣衫滥路扮演着乞讨者的角色。意指明显–在未来社会，人工智能日渐精进，人类的生存空间被机器人剥夺，从而沦为了流落街头的弱者。 图片所传达的意图，不由的使人联想到目前大火的人工智能话题。世界上首位拥有身份证的智能机器人诞生、阿里ai-双11的超级智能生产力,每秒能做8000张海报、申通快递分拣机器人效率惊人:70%人工下岗、无人超市。这些无不传达着，在未来几年之内工作单一而重复的传统行业将被人工智能替代。 [人类之手与智能科技接触] 做什么工作最有可能被机器人淘汰？BBC基于剑桥大学研究者MichaelOsborne和Carl Frey的数据体系分析了365种职业在未来的 ”被淘汰概率“，以下是其中部分职业的被淘汰概率。（排名越靠后越安全） 再来看看几条人工智能的新闻： 前不久，马云的第一家无人超市在杭州开业了 中国首个机器人工厂已经在广东东莞建造，这家机器人工厂成功地解放了90%的人类劳动力。 人工智能医生 “沃森 “已在江苏首诊，10秒就开出了肿瘤治疗方案。 细思极恐，就拿传统的工厂来说，员工上班效率，员工工资与之机器人相比无疑是处于劣势的。机器人仅仅需要日常维护和维修，成本是极为低廉的。 [智能AR在线购物] 通过上面的数据，我们可以得出如果工作符合以下特征，那么被机器人取代的可能性非常大： 1.无需天赋，经由训练即可掌握的技能； 2.大量的重复性劳动，每天上班无需过脑，但手熟尔； 3.工作空间狭小，坐在格子间里，不闻天下事。 虽说上图中分析详情仅基于这些职业在英国的前景及本土数据，但从这些概率中我们不难发现，如果你的工作包含以下三类技能要求，那么，你被机器人取代的可能性非常小： 1.社交能力、协商能力、以及人情练达的艺术； 2.同情心，以及对他人真心实意的扶助和关切； 3.创意和审美。 你，是否处境危险？]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程简史]]></title>
    <url>%2F2017%2F11%2F28%2F%C2%96%C2%96%E7%BC%96%E7%A8%8B%E7%AE%80%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[编程简史 说到编程简史（咳咳，敲黑板)小编给大家从计算机的起源开始说起。 计算机分为软件和硬件。起初计算机的发明是在二战时期，应用于军事。当时计算机体积一间教室都容纳不下，但是作为人类，懒是科技进步的原始动力。经过大牛的努力计算机的体积不断缩小。计算机也从原来的仅仅应用军事普及到了民用。 至此，基于计算机硬件得以运行的各种软件如雨后春笋般野蛮生长。而开发这些软件在最初的时候使用的编程语言呢？ 叫做机器语言，机器语言见名知意，是给机器看的。 也就是我们现在所说的二进制：0110 0100…二进制由1和0组成。 可想而知老是0011 0110 的，大牛看多了也头疼啊，这么多。怎么办呢？ 没错，偷懒。大牛们巧妙的更进一步创造了一种比机器语言更加便利的语言：汇编。那什么又是汇编呢？ 汇编指汇编语言，汇编程序。把汇编语言翻译成机器语言的过程称为汇编。在汇编语言中，用助记符(Memoni)代替操作码，用地址符号(Symbol)或标号(Label)代替地址码。这样用符号代替机器语言的二进制码，就把机器语言变成了汇编语言。 这下用符号来代替机器语言指挥计算机快捷多了吧？对，确实快多了。但是符号多了也记不住啊。要不说大牛怎么叫大牛呢，思想跟普通人就是不一样，不知道满足还特别懒~ 于是乎，就像西方的上帝说要有光，于是产生的光。上帝说要日夜交替，于是有了白天黑夜。大牛说不行还是太麻烦了。于是自己写了门语言叫做：C语言 ：） C语言的诞生，代表着一场革命。它将编程划分为高级语言与低级语言。 先前的机器语言和汇编是直接指挥计算机硬件进行工作的（效率高），而高级语言 “看不见”机器的硬件结构，不能用于编写直接访问机器硬件资源的系统软件或设备控制软件。为此，一些高级语言提供了与汇编语言之间的调用接口。当然相对的效率会有下降，但是抵不过方便 易用的特点。 由于C语言简单易用的特性，C语言很快便传播开来，也因为C语言的诞生为后来人提供了一条可行的思路，继而到产生了Java C# VB等等各式各样的编程语言。 这时，可能有人要说了从C语言的诞生到现在，产生了这么多编程语言。我该学哪一门？哪一门更加厉害实用呢？ 我不能给你一个确定的答案。 因为，你要有一个思维：编程语言只是工具，工具的如何使用需要的是思维！ 就如同我现在给你一把手枪，你要如何去使用需要的是你的思维。 也如同文章中的大牛一样，因为机器语言，汇编语言的不实用而产生了要自己造一个出来的想法。 靠的是什么？同样是思维。 拥有不同于他人思维，才能走更远。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程入门]]></title>
    <url>%2F2017%2F11%2F04%2F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[这篇文章是特地为对编程有兴趣的同学特意准备的，非战斗人员请速速撤离。 ０.选择一门编程语言 选择语言的话不需要纠结太多（但是不推荐易语言之流：），因为编程语言都是大同小异。并且在你精通一门语言之后再去学另一种编程语言时，你会发现卧槽要死要死，这么简单。 如果你选择纠结症特别严重的话，那么我推荐你可以从C语言开始你的编程人生。我当初也是通过C语言入门的，这里面有很多故事以后在谈。扯回来，C语言是一门古老的语言。并且是一门面向过程的结构化语言。JAVA、C#、Ｃ＋＋都诞生在其之后。所以选择C语言入门是你学习编程思想的不二之选。 １.确定好语言之后的学习路线 学习路线我不建议你去购买 ”入门到精通“ 之流的书籍。因为你购买到手之后你会发现 –我擦，这么厚？看到书的那一刻无形之中有股沉重感在心头蔓延~ 推荐你上网搜索题目进行实践。编程这种事情，在书本上看十遍不如实际动手操作一遍。推荐的网站有：【开源中国】、【实验楼】、【CSDN】；这些网站都是非常友好的。编译器等等PDF随便一搜就有。在我的公众号上面也有之前我学习过程中收集的题目、视频、PDF，都是已经打包好了的。你可以通过回复 [ 资料 ] 获取。 ２.学习过程中可能遇到的问题 其实，说到学习过程中遇到的问题。我很关心的是你们是否会产生想要放弃的想法。我想对你们说的是：学习这件事，最怕的就是三分钟热度。很多时候并不是你不行，而是你不想！有明确目标的人即使产生厌倦感也能够很快的找回状态。所有，我希望你们扪心自问是否有明确的目标？ 如果是编程方面所遇到的难题，你可以上博客网站、论坛上去发帖留言，向大牛请教。当然，我也很乐意为你解决难题。在程序员这个行业，虽然很多人都看起来很呆萌。但其实你接触久了之后你会发现－－其实就是一群闷骚的都比：P 说回来，网络中的资料杂七杂八，质量内容也是参差不齐的。在一定程度上学习资料会影响你的知识汲取速度。编程很简单，不要给自己设限。其实没什么大不了的。就和小学算数一样； 记住，光看不练不行动是永远得不到结果的。不要想太多，直接动手实操就是最有效的学习！ 遇到了难题，不要气馁。换一种思维，遇到了难题说明提升实力的时候来临了。你这次将这个难题解决后技术不是得到了进步？当下次，别人也同样遇到了相同的问题，这不是你装比的机会？ : ) 很多时候思维决定你的高度。 ３.编程的前瞻 我们现在所处的时代，遍地都是机会。对我个人而言，赶上了这个时代我觉得非常幸福！人工智能的崛起，各路行业大佬各显神通，在未来的几年中，所有的行业都会向智能化靠近。并且相对的很多传统行业都面临着失业的危险，人工智能将替代单一而重复的工作。 而人工智能的崛起，程序员必将极度紧缺。所以，这个行业的前途会暗淡吗？ 图片截取自TIOBE编程语言排行榜 2017年 - 11月]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>教学</tag>
        <tag>编程</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[千里之行--Java环境变量配置]]></title>
    <url>%2F2017%2F05%2F11%2F%E5%8D%83%E9%87%8C%E4%B9%8B%E8%A1%8C-Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[正所谓欲行其事，必利其器。学习Java也是这个道理。首先学习Java之前我们需要为Java搭建环境变量。大家可以把Java看成是一个需要细心呵护的孩子，在它来到一个陌生的世界时. 我们需要告诉它，它的家在哪里，门牌号是多少。出去玩的时候，它需要搭哪一辆公交车才能回到家。怎么样才不会迷路。 环境变量就是我们告诉它”地址“的地方。而Java它是一个非常聪明的孩子（不然我们也不会靠这个来吃饭对吧：） ，只需要你告诉它一遍就能够记住。刚刚上面所说的陌生世界就是电脑中的系统啦。 首先第一步我们需要告诉它 “它的家在哪里” 右键桌面上的“计算机图标”-“属性”-“高级系统设置”-“高级”-右下角有一个“环境变量”-“新建“ 我们就是在这里告诉它”门牌号“是多少多少 首先 我们的小Java刚来到这个陌生 世界，又需要让它把这里当做一个 温馨的家 我们就需要在这里给他做一个小窝啦。 所以我们需要告诉电脑：那个谁谁谁，现在在什么什么地方蹲着。它现在那个位置，以后就是它的家了。你按照我说的去做！！！ 步骤：单击新建 变量名：就是我们给Java 的小窝取的名字 变量值：就是它蹲的地方（就是你安装jdk的路径），注意只需要具体到它的蹲在什么位置. 不需要具体到它多重、多高、穿什么鞋子之类的（又不是查户口，问这么细干嘛：） 单击确定，Java的小窝就做好啦：） //是不是有点太草率了？？ 然后 我们就需要给它到公安局录入它的身份。//毕竟是黑户口嘛 在系统变量中下拉，找到 PATH 注意在这里面的数据，相当于你电脑里面 ” 所有系统软件” 的户口。小手千万别抖：）因为一不小心你电脑中的系统软件就全部变成黑户口了。 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin 上面这一行代码相信你如果有用心看我上面辛辛苦苦码的字，就应该知道 %JAVA_HOME% 就是我们刚才给小Java 建的小窝。至于为什么加两个百分号呢？为什么为什么？毕竟叫做小窝嘛，有两个百分号过分了？ 说正经的，这两个百分号有引用的意思，表示将引用 名字为”JAVA_HOME”环境变量中的值。简单点说，用 JAVA_HOME 这串代码代替了它其中的变量值。 相当于我们为 上图中所标识 的地址 取了一个别名叫做 JAVA_HOME，方便我们使用与记忆。而且既然是别名 那为什么要叫做JAVA_HOME 也不是为了洋气。 目的是为了”见名知意” %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin %JAVA_HOME%\bin; %JAVA_HOME%\jre\bin; 上面的路径中存放的则是小Java的具体信息，比如：身高，体重，三围。 对的，公安局才是查户口的。 可以打开jdk的安装目录，你可以看到bin目录还有jre目录与jre目录下有一个bin目录。 做到这里 环境变量还差一步就搭建好了。 我们需要最后建立一个名为：ClassPath 的系统环境变量，下面那一行的路径可以看作是小Java为我们做事时需要使用的工具。 它们分别是 tools.jar、dt.jar 可以在jdk的安装路径中找到这两个文件。注意：这个环境变量有点特殊，细心的同学可以发现在变量值中路径值的前面还有两个英文的符号 .; 记得要加上哦：） 耐得住寂寞，才能享受繁华。 开源改变世界，分享成就梦想 转载注明公众号出处 【本文由“讲编程账号”发布，2017年11月25日】]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>环境变量</tag>
        <tag>PATH</tag>
        <tag>教学</tag>
        <tag>千里之行</tag>
      </tags>
  </entry>
</search>
