<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小芳 All</title>
  <icon>https://www.gravatar.com/avatar/916e401ced5c66024bbe596fe8dc2c68</icon>
  <subtitle>感谢有你相伴🌹</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xn--yet221g.top/"/>
  <updated>2018-07-07T09:15:33.273Z</updated>
  <id>http://www.xn--yet221g.top/</id>
  
  <author>
    <name>小芳 All</name>
    <email>310253936@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eclipse编辑Spring配置文件xml时自动提示类class包名</title>
    <link href="http://www.xn--yet221g.top/2018/07/07/Eclipse%E7%BC%96%E8%BE%91Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6xml%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%90%E7%A4%BA%E7%B1%BBclass%E5%8C%85%E5%90%8D/"/>
    <id>http://www.xn--yet221g.top/2018/07/07/Eclipse编辑Spring配置文件xml时自动提示类class包名/</id>
    <published>2018-07-07T14:13:06.000Z</published>
    <updated>2018-07-07T09:15:33.273Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/EZ1Ye9T.png" alt=""><br><a id="more"></a></p><p><strong>分享连接：<a href="https://blog.csdn.net/HH775313602/article/details/70176531" target="_blank" rel="noopener">https://blog.csdn.net/HH775313602/article/details/70176531</a></strong></p><blockquote><p>正如ta所说 不行的话就多试几遍，博主一次成功的</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EZ1Ye9T.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Eclipse插件" scheme="http://www.xn--yet221g.top/categories/Eclipse%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="Eclipse插件" scheme="http://www.xn--yet221g.top/tags/Eclipse%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse的MyBatis插件</title>
    <link href="http://www.xn--yet221g.top/2018/07/06/Eclipse%E7%9A%84MyBatis%E6%8F%92%E4%BB%B6/"/>
    <id>http://www.xn--yet221g.top/2018/07/06/Eclipse的MyBatis插件/</id>
    <published>2018-07-06T14:13:06.000Z</published>
    <updated>2018-07-07T09:22:52.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Lt1cvQf.jpg" alt=""><br><a id="more"></a></p><blockquote><p><strong>分享连接：<a href="https://github.com/far310/mybatipse" target="_blank" rel="noopener">https://github.com/far310/mybatipse</a></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Lt1cvQf.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Eclipse插件" scheme="http://www.xn--yet221g.top/categories/Eclipse%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="Eclipse插件" scheme="http://www.xn--yet221g.top/tags/Eclipse%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用命令</title>
    <link href="http://www.xn--yet221g.top/2018/06/27/MySQL/"/>
    <id>http://www.xn--yet221g.top/2018/06/27/MySQL/</id>
    <published>2018-06-27T14:13:06.000Z</published>
    <updated>2018-06-27T06:47:15.405Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/qzGnrgx.jpg" alt=""></p><a id="more"></a><hr><p><strong>命令行连接数据库</strong></p><blockquote><p>mysql h-服务器主机地址 -u用户名 -p密码<br>如果是在本机操作，可省略-h参数，不是本机可以填写地址，或者端3306<br>示例：mysql -u root -p sa</p></blockquote><p><strong>查看当前mysql版本信息及用户名</strong></p><blockquote><p>select version(),user();<br>version()返回版本号，user()返回连接数据库用户名</p></blockquote><p><strong>创建数据库</strong></p><blockquote><p>create database 数据库名;</p></blockquote><p><strong>查看数据库列表</strong></p><blockquote><p>show databases;</p></blockquote><p><strong>选择数据库</strong></p><blockquote><p>use 数据库名;<br>示例：use myschool;</p></blockquote><p><strong>删除数据库</strong></p><blockquote><p>drop database 数据库名;<br>示例：drop database myschool;<br>警告：不要把系统默认的数据库删了，如果删了需要重装。</p></blockquote><p><strong>创建数据库表</strong></p><blockquote><p>首先选择数据库，在创建表<br>cerate table [if not exists] 表名( //if not exists 应该是判断表是否存在<br>    字段1 数据类型 [字段属性|约束] [索引] [注释] ,<br>    字段2 数据类型 [字段属性|约束] [索引] [注释]<br>)[表类型] [表字符集] [注释];<br>示例：<br>cerate table myschool(<br>    No int(4) primary key,//primary key 设置主键 //not null 非空约束<br>    name char(10)<br>);</p></blockquote><p><strong>添加数据</strong></p><blockquote><p>insert into 表名 value(值1),(值2),(值3);<br>示例：insert into name value(‘1’),(‘2’),(‘3’);</p></blockquote><p><strong>字段的约束及属性</strong></p><blockquote><p>not null 非空约束<br>default 默认约束<br>unique key(‘字段’) 唯一约束<br>primary key 主键约束<br>foreign key (‘主表字段’) 外键约束<br>auto_increment 自动增长 标识列</p></blockquote><p><strong>注释</strong></p><blockquote><p>create table test(<br>    id int(11) unsigned//唯一约束 comment ‘编号’<br>)comment=’测试表’;</p></blockquote><p><strong>查看表</strong></p><blockquote><p>show tables;</p></blockquote><p><strong>查看表的定义</strong></p><blockquote><p>describe 表名;<br>desc 表名;<br>示例：use myschool;desc student;</p></blockquote><p><strong>删除表</strong></p><blockquote><p>drop table [if exists] 表名;</p></blockquote><p><strong>mysql帮助</strong></p><blockquote><p>help <code>查询的关键字</code>;</p></blockquote><p><strong>修改表名</strong></p><blockquote><p>alter table&lt;旧表名&gt; rename [to] &lt;新表名&gt;;\to为可选参数，使用与否不影响结果。仅修改表名，表结构不表<br>示例：alter table student rename stu;</p></blockquote><p><strong>添加字段</strong></p><blockquote><p>alter table 表名 add 字段名 数据类型 [属性];<br>示例：alter table add pwd varchar(50) not null;</p></blockquote><p><strong>修改字段</strong></p><blockquote><p>alter table 表名 change 原字段 新字段 数据类型 [属性];<br>示例：alter table demo change name username char(2) not null;</p></blockquote><p><strong>删除字段</strong></p><blockquote><p>alter table 表名 drop 字段名;<br>示例：alter table demo drop pwd;</p></blockquote><p><strong>添加主外键约束</strong></p><blockquote><p>alter table 表名 add constraint 主键名 primary key 表名(主键字段); //主键名以pk_开头<br>示例：alter table grade add constraint pk_grade primary key grade(gradeId);</p></blockquote><p><strong>组合主键</strong></p><blockquote><p>primary key(主键字段1，主键字段2);</p></blockquote><p><strong>添加外键约束</strong></p><blockquote><p>alter table 表名//从表 add constraint 外键名 foreign key(外键字段) references 关键表名(关联字段)//主表; \外键名以fk_开头<br>示例：alter table student add constraint fk_student_grade foreign key(gradeId) references grade(gradeId);</p></blockquote><p><strong>备份</strong></p><blockquote><p>方式1：<br>insert into 新表(字段1，字段2)\新表必须存在<br>select 字段1，字段2<br>from 原表;<br>方式2：<br>create table 新表（select 字段1，字段2 from 原表）;</p></blockquote><p><strong>删除数据</strong></p><blockquote><p>delete from 表名 [where条件];条件删除，标识列继续<br>truncate table 表名;删除全部数据，标识列从头开始</p></blockquote><p><strong>limit子句</strong></p><blockquote><p>limit [从第几条开始查\从0开始，行数]<br>示例：limit 4,4;</p></blockquote><p><strong>执行事务</strong></p><blockquote><p>开始事务：begin;<br>提交事务：commit;<br>撤销事务：rollback;</p></blockquote><p><strong>使用sql语句创建视图</strong></p><blockquote><p>create view 视图名<br>as </p></blockquote><p>&lt;select语句&gt;</p><p><strong>使用sql语句删除视图</strong></p><blockquote><p>drop view [if exists] 视图名;</p></blockquote><p><strong>查看视图</strong></p><blockquote><p>select 字段1，字段2 from 视图名</p></blockquote><p><strong>数据备份</strong></p><blockquote><p>mysqldump -u 登录名 -p 密码 要备份的数据 [表名] &gt; 文件名称</p></blockquote><blockquote><p>数据还原 -u 登录名 -p 密码 &lt; 文件名称</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qzGnrgx.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.xn--yet221g.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.xn--yet221g.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo命令</title>
    <link href="http://www.xn--yet221g.top/2018/06/25/Hexo/"/>
    <id>http://www.xn--yet221g.top/2018/06/25/Hexo/</id>
    <published>2018-06-25T14:13:06.000Z</published>
    <updated>2018-06-25T02:56:16.467Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xMoYpRM.jpg" alt=""></p><a id="more"></a><hr><p><strong>hexo 命令</strong></p><blockquote><p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本<br>hexo deploy -g  #生成加部署<br>hexo server -g  #生成加预览</p></blockquote><p><strong>命令的简写</strong></p><blockquote><p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xMoYpRM.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.xn--yet221g.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.xn--yet221g.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://www.xn--yet221g.top/2018/06/24/Git/"/>
    <id>http://www.xn--yet221g.top/2018/06/24/Git/</id>
    <published>2018-06-24T14:13:06.000Z</published>
    <updated>2018-06-24T10:54:22.412Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/x9aM8vk.png" alt=""></p><a id="more"></a><hr><p><strong>1. git diff 文件全局名</strong></p><blockquote><p>对比文件与当前版本库的不同。<br>PS：效果等同：<br>git diff HEAD – 文件全局名</p></blockquote><p><strong>2. cat 文件全局名 </strong></p><blockquote><p>查看文件内容</p></blockquote><p><strong>3. git log</strong></p><blockquote><p>查看提交版本日志（只展示当前所在版本及以前版本）。<br>PS：单排显示：<br>git log –pretty=oneline<br>版本号简写显示：<br>git log –pretty=oneline –abbrev-commit<br>时间线显示：<br>git log –graph –pretty=oneline –abbrev-commit</p></blockquote><p><strong>4. git reflog</strong></p><blockquote><p>查看提交版本日志（展示所有版本）</p></blockquote><p><strong>5. git reset –hard HEAD^</strong></p><blockquote><p>PS：版本穿梭，HEAD表示当前版本，HEAD^表示上一版本，HEAD^^表示上两个版本…</p></blockquote><p><strong>6. git reset –hard HEAD~1</strong></p><blockquote><p>PS：版本穿梭，HEAD表示当前版本，HEAD~1表示上一版本，HEAD~2表示上两个版本…</p></blockquote><p><strong>7. git reset –hard 版本号</strong></p><blockquote><p>PS：版本穿梭，版本号不必32位都写全，一般写7位就可以了，git会自己去查找。</p></blockquote><p><strong>8. git checkout – 文件全局名</strong></p><blockquote><p>工作区文件内容会被版本库上最新的内容覆盖</p></blockquote><p><strong>9. git reset HEAD 文件全局名</strong></p><blockquote><p>这样可以清空暂存区，而工作区的内容不变，所以工作区文件状态会发生变化</p></blockquote><p><strong>10. git rm 文件全局名</strong></p><blockquote><p>删除文件<br>PS：只有提交至版本库的文件才能rm，只是在工作区或暂存区是不能使用rm的</p></blockquote><p><strong>11. ssh-keygen -t rsa -C “<a href="mailto:310253936@qq.com" target="_blank" rel="noopener">310253936@qq.com</a>“</strong></p><blockquote><p>PS:邮箱是写自己的<br>生成ssh key</p></blockquote><p><strong>12. git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:qwebh3210/gittest.git</strong></p><blockquote><p>本地仓库关联远程仓库<br>PS：也可以用http协议关联：<br>git remote add origin <a href="https://github.com/qwebh3210/gittest.git" target="_blank" rel="noopener">https://github.com/qwebh3210/gittest.git</a></p></blockquote><p><strong>13. git push -u origin master</strong></p><blockquote><p>把本地仓库当前分支推送到远程仓库指定分支<br>PS：第一次推送需要参数-u进行验证，之后不需要</p></blockquote><p><strong>14. git clone 远程仓库地址</strong></p><blockquote><p>克隆远程仓库<br>PS：git clone下来的只有master分支</p></blockquote><p><strong>15. git add 文件全局名</strong></p><blockquote><p>把文件添加至暂存区<br>PS：删除的文件不需要add，可以直接commit</p></blockquote><p><strong>16. git log -1</strong></p><blockquote><p>PS：显示最后一次提交信息（作者、时间、提交注释）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/x9aM8vk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.xn--yet221g.top/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.xn--yet221g.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>会摆造型的数字时钟</title>
    <link href="http://www.xn--yet221g.top/2018/06/23/%E6%97%B6%E9%97%B4/"/>
    <id>http://www.xn--yet221g.top/2018/06/23/时间/</id>
    <published>2018-06-23T14:13:06.000Z</published>
    <updated>2018-06-29T01:55:51.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/bzZE0yL.jpg" alt=""></p><h2 id="会摆造型的数字时钟会是什么样子呢？"><a href="#会摆造型的数字时钟会是什么样子呢？" class="headerlink" title="会摆造型的数字时钟会是什么样子呢？"></a>会摆造型的数字时钟会是什么样子呢？</h2><a id="more"></a><ul><li>页面效果如下：<br><img src="https://i.imgur.com/vBA6af3.png" alt=""></li></ul><ol><li><p>JS代码如下:</p><blockquote><p><code>&lt;script charset=&quot;Shift_JIS&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js&quot; &gt;&lt;/script&gt;</code></p></blockquote></li><li><p>HTML代码如下：</p><blockquote><p><code>&lt;embed width=&quot;320&quot; height=&quot;140&quot; align=&quot;middle&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; name=&quot;honehoneclock&quot; bgcolor=&quot;#ffffff&quot; quality=&quot;high&quot; src=&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf&quot; wmode=&quot;transparent&quot;/&gt;</code></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bzZE0yL.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;会摆造型的数字时钟会是什么样子呢？&quot;&gt;&lt;a href=&quot;#会摆造型的数字时钟会是什么样子呢？&quot; class=&quot;headerlink&quot; title=&quot;会摆造型的数字时钟会是什么样子呢？&quot;&gt;&lt;/a&gt;会摆造型的数字时钟会是什么样子呢？&lt;/h2&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://www.xn--yet221g.top/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://www.xn--yet221g.top/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>什么是单例模式</title>
    <link href="http://www.xn--yet221g.top/2018/05/16/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xn--yet221g.top/2018/05/16/什么是单例模式/</id>
    <published>2018-05-16T14:13:06.000Z</published>
    <updated>2018-06-22T03:04:59.014Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://i.loli.net/2018/06/21/5b2ba724f0183.gif" class="full-image" alt="alt" title="title"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><a id="more"></a><p>&emsp;&emsp;单例模式，顾名思义就是程序在运行的过程中，有且只有一个实例。它必须满足三个关键点。</p><p>&emsp;&emsp;1）一个类只有一个实例。这是满足单例模式最基本的要求，若要满足这个关键点，只能提供私有的构造器，即保证不能随意创建该类的实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class ConfigManager &#123;</span><br><span class="line">private static ConfigManager configManager;</span><br><span class="line">//私有构造器-读取数据库配置文件</span><br><span class="line">private ConfigManager()&#123;</span><br><span class="line">String configFile = &quot;database.properties&quot;;</span><br><span class="line">properties = new Properties();</span><br><span class="line">InputStream is = </span><br><span class="line">ConfigManager.class.getClassLoader().getResourceAsStream(configFile);</span><br><span class="line">try &#123;</span><br><span class="line">properties.load(is);</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在上述代码中，我们把读取配置文件的I/O操作代码放入私有构造器里，这样可以有效地保证I/O操作在整个系统运行期间仅被执行一次，以解决资源消耗问题。</p><p>&emsp;&emsp;2）它必须自行创建这个实例。对于这一点，正是体现了：单例模式的“有且仅有一个实例”的这一特性。我们要保证唯一性，也就意味着必须要提供一个实例，那么就需要它自行创建，定义一个ConfigManager类型的静态的私有对象，以便向外界提供该类实例时使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//读取配置文件的工具类-单例模式</span><br><span class="line">public class ConfigManager &#123;</span><br><span class="line">private static ConfigManager configManager;</span><br><span class="line">private static Properties properties;</span><br><span class="line">//私有构造器-读取数据库配置文件</span><br><span class="line">private ConfigManager()&#123;</span><br><span class="line">String configFile = &quot;database.properties&quot;;</span><br><span class="line">properties = new Properties();</span><br><span class="line">InputStream is = </span><br><span class="line">ConfigManager.class.getClassLoader().getResourceAsStream(configFile);</span><br><span class="line">try &#123;</span><br><span class="line">properties.load(is);</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在上面的代码中，我们定义了一个ConfigManager的静态私有对象configManager。</p><p>&emsp;&emsp;3）它必须自行向整个系统提供这个实例。最后一点也是至关重要的，外界需要获取并使用这个单例类的实例，但是由于该类的构造器是私有的，外界无法通过new去获取它的实例，那么就必须提供一个静态的公有方法，该方法创建或者获取它本身的静态私有对象并返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//读取配置文件的工具类-单例模式</span><br><span class="line">public class ConfigManager &#123;</span><br><span class="line">private static ConfigManager configManager;</span><br><span class="line">private static Properties properties;</span><br><span class="line">//私有构造器-读取数据库配置文件</span><br><span class="line">private ConfigManager()&#123;</span><br><span class="line">String configFile = &quot;database.properties&quot;;</span><br><span class="line">properties = new Properties();</span><br><span class="line">InputStream is = </span><br><span class="line">ConfigManager.class.getClassLoader().getResourceAsStream(configFile);</span><br><span class="line">try &#123;</span><br><span class="line">properties.load(is);</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//全局访问点</span><br><span class="line">public static ConfigManager getInstance()&#123;</span><br><span class="line">if(configManager == null)&#123;</span><br><span class="line">configManager = new ConfigManager();</span><br><span class="line">&#125;</span><br><span class="line">return configManager;</span><br><span class="line">&#125;</span><br><span class="line">//根据传入的key获取相应的value值</span><br><span class="line">public String getValue(String key)&#123;</span><br><span class="line">return properties.getProperty(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在上面的代码中，我们添加了一个全局的访问点getInstance()方法，该方法返回该类的实例，以被外界使用。在该方法体内，进行了简单的逻辑判断，若configManager为null，那么创建该实例；若不为空，那么直接返回configManager实例即可，不需要再实例化该类的对象。</p><p>&emsp;&emsp;为什么要将getInstance（）方法定位为static呢？</p><p>&emsp;&emsp;因为作为该单例类的全局访问点，外界需要哦调用该方法来获取configManager方法，则该方法必须也是静态的，否则无法调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://i.loli.net/2018/06/21/5b2ba724f0183.gif&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;title&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>胡思乱想</title>
    <link href="http://www.xn--yet221g.top/2018/05/14/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    <id>http://www.xn--yet221g.top/2018/05/14/胡思乱想/</id>
    <published>2018-05-14T14:08:38.000Z</published>
    <updated>2018-05-25T02:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://p6wzlnrcf.bkt.clouddn.com/wallhaven-641206.png" class="full-image" alt="胡思乱想"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><a id="more"></a><h1 id="关于智能手机"><a href="#关于智能手机" class="headerlink" title="关于智能手机"></a>关于智能手机</h1><p>&emsp;&emsp;近些年来智能手机的发展可谓是日新月异，无论是硬件方面来说，还是从软件方面。回想一下，12年、13年的时候，身边的朋友用的都还是带按键的手机，牛皮一点的是传说中的触屏（用指甲使劲戳几下就能选中）手机。功能上也就是打电话，最多带个QQ。总的来说没有跨出手机本身的意义。<br>&emsp;&emsp;记得是从13年左右的时候，智能手机出现在了中国大众的手中（依稀记得当时被炒上天的iPhone，一男子割肾只求一台iphone4s）笑，随着智能手机的发展，安卓迎来了一波春天。安卓平台上的app，尽力的满足着基数巨大的国民，只有想不到，没有做不到（毕竟流量即金钱）。微信、淘宝、短视频app、自媒体，从各个角度出发吸引着大众的眼球。触手可得的资讯、宝贵的知识，动动手指即可获得，不！手指都不需要动，即自动送到你的眼下。只求你的片刻停留。<br>&emsp;&emsp;在这样的环境下，产生了各种博人眼球的新兴词汇：知识焦虑、碎片化阅读、知识付费。产生这些词汇背后的本质是什么？获得你的停留，获取流量，继而获利。是的，有一小部分人获利了，根据2/8定律，获利的对象是那八成的大众。<br>&emsp;&emsp;大众是愚昧的，像一位皇帝一样被伺候着，被虚有的信息刺激着大脑多巴胺的分泌，获取着令大脑愉悦的快感。温水煮青蛙。使用虚拟的网络、朋友圈，装饰着虚幻的小我。时间久了变得分不清哪个才是真正的自我。<br>&emsp;&emsp;更加可怕的是这一代的小孩，从小就生活在这样虚无飘渺的世界中。<br>&emsp;&emsp;何以解忧？引用许嵩许多年前的写的歌词</p><blockquote class="blockquote-center"><p>放下客户端，立地成佛 </p></blockquote><h1 id="关于色"><a href="#关于色" class="headerlink" title="关于色"></a>关于色</h1><p>&emsp;&emsp;现中国环境下，随着网络的普及，弃前人之鉴而不顾。完全不知戒色为何物。<br><blockquote class="blockquote-center"><p>子曰：少之时，气血未定，戒之在色。<br>又有前人曰：二八佳人体似酥，腰间仗剑斩愚夫。 </p></blockquote><br>&emsp;&emsp;唾手可及的情色讯息，打开潘多拉盒子的现代中国，年轻一代深受茶毒。殊不知，精为人之本，发之华。<br>&emsp;&emsp;为着短暂的快感，而全然不顾根本。殊不知，所谓的快感，其实是毒药。<br>&emsp;&emsp;食与色，为人之本性。驾驭不了本性之人，与禽兽何异。<br>&emsp;&emsp;当局者迷旁观者清。跳出来，你能看到更美好的世界。</p><h1 id="关于阅读"><a href="#关于阅读" class="headerlink" title="关于阅读"></a>关于阅读</h1><p>&emsp;&emsp;阅读一事，实在有趣。白日清欢无它事，摇椅捧书笑偷闲。多少人迷失在所谓的阅读上面，以为可以寻到宝藏，还是太轻浮了。将心静下来，仔细想想宝藏在哪里？<br>&emsp;&emsp;书有消遣与教材之分（个人看法，欢迎探讨）。<br>&emsp;&emsp;千人千面，在消遣类的书籍中，不同的人都不同的感想和收获。这是强求不来的，有些书，人家说好，但是你读不进去，硬着头皮读下去，你也得不到什么。你选择书，书也在选择你。还不如洒脱的将其丢在一旁。等他日机遇到了自然会想起。<br>&emsp;&emsp;教材类书籍，才是你学习知识的宝贵财富。它讲述的是明确的内容，它所存在的意义就是将作者的知识记载下来，供世人消化、学习。自然，干货的汲取舒适度、速度肯定是不如消遣类书籍来得愉悦、来得迅速。但是这毕竟是实实在在的知识呀。<br>&emsp;&emsp;人天性就是追寻舒适。能掌控自己的人，属于少数。</p><h1 id="关于内心"><a href="#关于内心" class="headerlink" title="关于内心"></a>关于内心</h1><blockquote class="blockquote-center"><p>当局者迷旁观者清</p></blockquote><p>&emsp;&emsp;上面这句话，你真的懂吗？<br>&emsp;&emsp;人是由无数细胞组成的碳基生命体，细胞是新陈代谢的，也就是说，从理论上讲，你从出生到现在，实际上你的身体已经换了好几遍了。你还是你吗？<br>&emsp;&emsp;没错，你还是你，我现在是在和真正的你讲话。我口中的你，是你的思想本身。不用去别处寻找，你就是你。情绪、欲望、邪念都不是真的你。跳出来，你就是不一样的你。身体是客观存在的物体，而你（本我）才是旁观着这一切的旁观者。<br>&emsp;&emsp;嗯，时间不早了，就写到这里吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://p6wzlnrcf.bkt.clouddn.com/wallhaven-641206.png&quot; class=&quot;full-image&quot; alt=&quot;胡思乱想&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.xn--yet221g.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.xn--yet221g.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="胡思乱想" scheme="http://www.xn--yet221g.top/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>对人工智能的一些思考</title>
    <link href="http://www.xn--yet221g.top/2017/12/01/%C2%96%C2%96%E5%AF%B9%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://www.xn--yet221g.top/2017/12/01/对人工智能的一些思考/</id>
    <published>2017-12-01T11:08:40.000Z</published>
    <updated>2018-05-25T02:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;人工智能<br><a id="more"></a><br><img src="http://p6wzlnrcf.bkt.clouddn.com/0.jpg" alt="image"></p><blockquote><p>前段时间，在朋友圈看到的一张图片。促使我写下了这篇文章。</p></blockquote><p>封面上，满大街的机器人行走散步。人类席地而坐，衣衫滥路扮演着乞讨者的角色。意指明显–在未来社会，人工智能日渐精进，人类的生存空间被机器人剥夺，从而沦为了流落街头的弱者。</p><p>图片所传达的意图，不由的使人联想到目前大火的人工智能话题。世界上首位拥有身份证的智能机器人诞生、阿里ai-双11的超级智能生产力,每秒能做8000张海报、申通快递分拣机器人效率惊人:70%人工下岗、无人超市。这些无不传达着，在未来几年之内工作单一而重复的传统行业将被人工智能替代。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/1.jpg" alt="image"></p><p>[人类之手与智能科技接触]</p><p>做什么工作最有可能被机器人淘汰？BBC基于剑桥大学研究者MichaelOsborne和Carl Frey的数据体系分析了365种职业在未来的 ”被淘汰概率“，以下是其中部分职业的被淘汰概率。（排名越靠后越安全）</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/2.jpg" alt="image"></p><p>再来看看几条人工智能的新闻：</p><blockquote><p>   前不久，马云的第一家无人超市在杭州开业了</p><p>  中国首个机器人工厂已经在广东东莞建造，这家机器人工厂成功地解放了90%的人类劳动力。</p><p>人工智能医生 “沃森 “已在江苏首诊，10秒就开出了肿瘤治疗方案。</p></blockquote><p>细思极恐，就拿传统的工厂来说，员工上班效率，员工工资与之机器人相比无疑是处于劣势的。机器人仅仅需要日常维护和维修，成本是极为低廉的。</p><p>[智能AR在线购物]</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/3.jpg" alt="image"></p><p>通过上面的数据，我们可以得出如果工作符合以下特征，那么被机器人取代的可能性非常大：</p><pre><code>1.无需天赋，经由训练即可掌握的技能；2.大量的重复性劳动，每天上班无需过脑，但手熟尔；3.工作空间狭小，坐在格子间里，不闻天下事。</code></pre><p>虽说上图中分析详情仅基于这些职业在英国的前景及本土数据，但从这些概率中我们不难发现，如果你的工作包含以下三类技能要求，那么，你被机器人取代的可能性非常小：</p><pre><code>1.社交能力、协商能力、以及人情练达的艺术；2.同情心，以及对他人真心实意的扶助和关切；3.创意和审美。</code></pre><p>你，是否处境危险？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;人工智能&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.xn--yet221g.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.xn--yet221g.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="胡思乱想" scheme="http://www.xn--yet221g.top/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>编程简史</title>
    <link href="http://www.xn--yet221g.top/2017/11/28/%C2%96%C2%96%E7%BC%96%E7%A8%8B%E7%AE%80%E5%8F%B2/"/>
    <id>http://www.xn--yet221g.top/2017/11/28/编程简史/</id>
    <published>2017-11-28T15:08:51.000Z</published>
    <updated>2018-05-25T02:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://p6wzlnrcf.bkt.clouddn.com/11.jpg" class="full-image" alt="编程简史"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><a id="more"></a><blockquote class="blockquote-center"><p>编程简史 </p></blockquote><p>说到编程简史（咳咳，敲黑板)小编给大家从计算机的起源开始说起。</p><p>计算机分为软件和硬件。起初计算机的发明是在二战时期，应用于军事。当时计算机体积一间教室都容纳不下，但是作为人类，懒是科技进步的原始动力。经过大牛的努力计算机的体积不断缩小。计算机也从原来的仅仅应用军事普及到了民用。</p><p>至此，基于计算机硬件得以运行的各种软件如雨后春笋般野蛮生长。而开发这些软件在最初的时候使用的编程语言呢？</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/221222.jpg" alt="image"></p><p>叫做机器语言，机器语言见名知意，是给机器看的。</p><p>也就是我们现在所说的二进制：0110 0100…二进制由1和0组成。</p><p>可想而知老是0011 0110 的，大牛看多了也头疼啊，这么多。怎么办呢？ 没错，偷懒。大牛们巧妙的更进一步创造了一种比机器语言更加便利的语言：汇编。<br><blockquote class="blockquote-center"><p>那什么又是汇编呢？ </p></blockquote></p><p>汇编指汇编语言，汇编程序。把汇编语言翻译成机器语言的过程称为汇编。在汇编语言中，用助记符(Memoni)代替操作码，用地址符号(Symbol)或标号(Label)代替地址码。这样用符号代替机器语言的二进制码，就把机器语言变成了汇编语言。</p><p>这下用符号来代替机器语言指挥计算机快捷多了吧？对，确实快多了。但是符号多了也记不住啊。要不说大牛怎么叫大牛呢，思想跟普通人就是不一样，不知道满足还特别懒~</p><p>于是乎，就像西方的上帝说要有光，于是产生的光。上帝说要日夜交替，于是有了白天黑夜。大牛说不行还是太麻烦了。于是自己写了门语言叫做：C语言 ：）</p><p>C语言的诞生，代表着一场革命。它将编程划分为高级语言与低级语言。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/221225.jpg" alt="image"></p><p>先前的机器语言和汇编是直接指挥计算机硬件进行工作的（效率高），而高级语言 “看不见”机器的硬件结构，不能用于编写直接访问机器硬件资源的系统软件或设备控制软件。为此，一些高级语言提供了与汇编语言之间的调用接口。当然相对的效率会有下降，但是抵不过方便 易用的特点。</p><p>由于C语言简单易用的特性，C语言很快便传播开来，也因为C语言的诞生为后来人提供了一条可行的思路，继而到产生了Java C# VB等等各式各样的编程语言。</p><p>这时，可能有人要说了从C语言的诞生到现在，产生了这么多编程语言。我该学哪一门？哪一门更加厉害实用呢？</p><p>我不能给你一个确定的答案。</p><p>因为，你要有一个思维：编程语言只是工具，工具的如何使用需要的是思维！</p><p>就如同我现在给你一把手枪，你要如何去使用需要的是你的思维。</p><p>也如同文章中的大牛一样，因为机器语言，汇编语言的不实用而产生了要自己造一个出来的想法。</p><p>靠的是什么？同样是思维。</p><p>拥有不同于他人思维，才能走更远。</p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://p6wzlnrcf.bkt.clouddn.com/11.jpg&quot; class=&quot;full-image&quot; alt=&quot;编程简史&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.xn--yet221g.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.xn--yet221g.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="胡思乱想" scheme="http://www.xn--yet221g.top/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>编程入门</title>
    <link href="http://www.xn--yet221g.top/2017/11/04/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://www.xn--yet221g.top/2017/11/04/编程入门/</id>
    <published>2017-11-04T14:05:15.000Z</published>
    <updated>2018-05-25T02:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://p6wzlnrcf.bkt.clouddn.com/zplqdokj.bmp" class="full-image" alt="编程入门"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><a id="more"></a><p>这篇文章是特地为对编程有兴趣的同学特意准备的，非战斗人员请速速撤离。</p><blockquote class="blockquote-center"><p>０.选择一门编程语言 </p></blockquote><p>选择语言的话不需要纠结太多（但是不推荐易语言之流：），因为编程语言都是大同小异。并且在你精通一门语言之后再去学另一种编程语言时，你会发现卧槽要死要死，这么简单。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-1.jpg" alt="imgage"></p><p>如果你选择纠结症特别严重的话，那么我推荐你可以从C语言开始你的编程人生。我当初也是通过C语言入门的，这里面有很多故事以后在谈。扯回来，C语言是一门古老的语言。并且是一门面向过程的结构化语言。JAVA、C#、Ｃ＋＋都诞生在其之后。所以选择C语言入门是你学习编程思想的不二之选。</p><blockquote class="blockquote-center"><p>１.确定好语言之后的学习路线 </p></blockquote><p>学习路线我不建议你去购买 ”入门到精通“ 之流的书籍。因为你购买到手之后你会发现 –我擦，这么厚？看到书的那一刻无形之中有股沉重感在心头蔓延~</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-2.jpg" alt="image"></p><p>推荐你上网搜索题目进行实践。编程这种事情，在书本上看十遍不如实际动手操作一遍。推荐的网站有：【开源中国】、【实验楼】、【CSDN】；这些网站都是非常友好的。编译器等等PDF随便一搜就有。在我的公众号上面也有之前我学习过程中收集的题目、视频、PDF，都是已经打包好了的。你可以通过回复 [ 资料 ] 获取。</p><blockquote class="blockquote-center"><p>２.学习过程中可能遇到的问题 </p></blockquote><p>其实，说到学习过程中遇到的问题。我很关心的是你们是否会产生想要放弃的想法。我想对你们说的是：学习这件事，最怕的就是三分钟热度。很多时候并不是你不行，而是你不想！有明确目标的人即使产生厌倦感也能够很快的找回状态。所有，我希望你们扪心自问是否有明确的目标？</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-3.jpg" alt="image"></p><p>如果是编程方面所遇到的难题，你可以上博客网站、论坛上去发帖留言，向大牛请教。当然，我也很乐意为你解决难题。在程序员这个行业，虽然很多人都看起来很呆萌。但其实你接触久了之后你会发现－－其实就是一群闷骚的都比：P</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-4.jpg" alt="image"></p><p>说回来，网络中的资料杂七杂八，质量内容也是参差不齐的。在一定程度上学习资料会影响你的知识汲取速度。编程很简单，不要给自己设限。其实没什么大不了的。就和小学算数一样；</p><p>记住，光看不练不行动是永远得不到结果的。不要想太多，直接动手实操就是最有效的学习！</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-5.jpg" alt="image"></p><p>遇到了难题，不要气馁。换一种思维，遇到了难题说明提升实力的时候来临了。你这次将这个难题解决后技术不是得到了进步？当下次，别人也同样遇到了相同的问题，这不是你装比的机会？</p><p>: ) 很多时候思维决定你的高度。</p><blockquote class="blockquote-center"><p>３.编程的前瞻 </p></blockquote><p>我们现在所处的时代，遍地都是机会。对我个人而言，赶上了这个时代我觉得非常幸福！人工智能的崛起，各路行业大佬各显神通，在未来的几年中，所有的行业都会向智能化靠近。并且相对的很多传统行业都面临着失业的危险，人工智能将替代单一而重复的工作。</p><p>而人工智能的崛起，程序员必将极度紧缺。所以，这个行业的前途会暗淡吗？</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/rm-6.jpg" alt="image"><br>图片截取自TIOBE编程语言排行榜 2017年 - 11月</p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://p6wzlnrcf.bkt.clouddn.com/zplqdokj.bmp&quot; class=&quot;full-image&quot; alt=&quot;编程入门&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="教学" scheme="http://www.xn--yet221g.top/categories/%E6%95%99%E5%AD%A6/"/>
    
    
      <category term="教学" scheme="http://www.xn--yet221g.top/tags/%E6%95%99%E5%AD%A6/"/>
    
      <category term="编程" scheme="http://www.xn--yet221g.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C" scheme="http://www.xn--yet221g.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>千里之行--Java环境变量配置</title>
    <link href="http://www.xn--yet221g.top/2017/05/11/%E5%8D%83%E9%87%8C%E4%B9%8B%E8%A1%8C-Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.xn--yet221g.top/2017/05/11/千里之行-Java环境变量配置/</id>
    <published>2017-05-11T09:10:28.000Z</published>
    <updated>2018-05-25T02:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://p6wzlnrcf.bkt.clouddn.com/wallhaven-638074.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><a id="more"></a><p>正所谓欲行其事，必利其器。学习Java也是这个道理。首先学习Java之前我们需要为Java搭建环境变量。大家可以把Java看成是一个需要细心呵护的孩子，在它来到一个陌生的世界时.</p><p>我们需要告诉它，它的家在哪里，门牌号是多少。出去玩的时候，它需要搭哪一辆公交车才能回到家。怎么样才不会迷路。</p><p>环境变量就是我们告诉它”地址“的地方。而Java它是一个非常聪明的孩子（不然我们也不会靠这个来吃饭对吧：） ，只需要你告诉它一遍就能够记住。刚刚上面所说的陌生世界就是电脑中的系统啦。</p><p>首先第一步我们需要告诉它</p><p>“它的家在哪里”</p><p>右键桌面上的“计算机图标”-“属性”-“高级系统设置”-“高级”-右下角有一个“环境变量”-“新建“</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-1.jpg" alt="image"></p><p>我们就是在这里告诉它”门牌号“是多少多少</p><p>首先 我们的小Java刚来到这个陌生 世界，又需要让它把这里当做一个 温馨的家 我们就需要在这里给他做一个小窝啦。</p><p>所以我们需要告诉电脑：那个谁谁谁，现在在什么什么地方蹲着。它现在那个位置，以后就是它的家了。你按照我说的去做！！！</p><p>步骤：单击新建</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-2.jpg" alt="image"> </p><p>变量名：就是我们给Java 的小窝取的名字</p><p>变量值：就是它蹲的地方（就是你安装jdk的路径），注意只需要具体到它的蹲在什么位置. 不需要具体到它多重、多高、穿什么鞋子之类的（又不是查户口，问这么细干嘛：）</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-3.jpg" alt="image"> </p><p>单击确定，Java的小窝就做好啦：）  //是不是有点太草率了？？</p><p>然后 我们就需要给它到公安局录入它的身份。//毕竟是黑户口嘛</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-4.jpg" alt="image"> </p><p>在系统变量中下拉，找到 PATH</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-5.jpg" alt="image"></p><p>注意在这里面的数据，相当于你电脑里面 ” 所有系统软件” 的户口。小手千万别抖：）因为一不小心你电脑中的系统软件就全部变成黑户口了。</p><p>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</p><p>上面这一行代码相信你如果有用心看我上面辛辛苦苦码的字，就应该知道 %JAVA_HOME% 就是我们刚才给小Java 建的小窝。至于为什么加两个百分号呢？为什么为什么？毕竟叫做小窝嘛，有两个百分号过分了？</p><p>说正经的，这两个百分号有引用的意思，表示将引用 名字为”JAVA_HOME”环境变量中的值。简单点说，用 JAVA_HOME 这串代码代替了它其中的变量值。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-6.jpg" alt="image"></p><p>相当于我们为 上图中所标识 的地址 取了一个别名叫做 JAVA_HOME，方便我们使用与记忆。而且既然是别名 那为什么要叫做JAVA_HOME 也不是为了洋气。</p><p>目的是为了”见名知意”</p><p>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</p><p>%JAVA_HOME%\bin;</p><p>%JAVA_HOME%\jre\bin;</p><p>上面的路径中存放的则是小Java的具体信息，比如：身高，体重，三围。</p><p>对的，公安局才是查户口的。</p><p>可以打开jdk的安装目录，你可以看到bin目录还有jre目录与jre目录下有一个bin目录。</p><p>做到这里 环境变量还差一步就搭建好了。</p><p><img src="http://p6wzlnrcf.bkt.clouddn.com/path-7.jpg" alt="image"> </p><p>我们需要最后建立一个名为：ClassPath 的系统环境变量，下面那一行的路径可以看作是小Java为我们做事时需要使用的工具。</p><p>它们分别是 tools.jar、dt.jar</p><p>可以在jdk的安装路径中找到这两个文件。注意：这个环境变量有点特殊，细心的同学可以发现在变量值中路径值的前面还有两个英文的符号 .; 记得要加上哦：）</p><pre><code>耐得住寂寞，才能享受繁华。开源改变世界，分享成就梦想转载注明公众号出处</code></pre><p>【本文由“讲编程账号”发布，2017年11月25日】</p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://p6wzlnrcf.bkt.clouddn.com/wallhaven-638074.jpg&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.xn--yet221g.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.xn--yet221g.top/tags/java/"/>
    
      <category term="环境变量" scheme="http://www.xn--yet221g.top/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
      <category term="PATH" scheme="http://www.xn--yet221g.top/tags/PATH/"/>
    
      <category term="教学" scheme="http://www.xn--yet221g.top/tags/%E6%95%99%E5%AD%A6/"/>
    
      <category term="千里之行" scheme="http://www.xn--yet221g.top/tags/%E5%8D%83%E9%87%8C%E4%B9%8B%E8%A1%8C/"/>
    
  </entry>
  
</feed>
